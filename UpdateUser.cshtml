@{
    /*
        TODO: This needs to be updated.  Not done.
                It was copied from EditProduct but not updated to apply to
                editing a User
    */
     Layout = "~/_SiteLayout.cshtml";
     
    Page.Title = "User Administration";
    
    // deny access to any user not an Admin
    if (!User.IsInRole("Admin")) {
        Response.Redirect("Account/Login");
    }

     //open the db
     var db =Database.Open("StarterSite");
     
     // get the userID to edit
     var editUserID = UrlData[0];

     // if there was no userID to edit, redirect
     if(editUserID.IsEmpty()){
         Response.Redirect(@Href("~/Admin"));
     }

    // Setup validation
    Validation.RequireField("username", "You must specify a username.");
    Validation.RequireField("email", "You must specify an email address.");
    //Username Validation
    Validation.Add("username",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 5,
            errorMessage: "username must be at least 5 characters"));

     var selectQueryString = "SELECT * " +
                             "FROM UserProfile " +
                             "WHERE UserId=@0";
     
    // query the db and get the variables of the user to edit
    var row = db.QuerySingle(selectQueryString, editUserID);
    var email = row.Email;
    var username = row.Username;
    var picture = row.Picture;

    // setup variables for updating image
    WebImage photo = null;
    var newFileName = "";
    var imagePath = "";


     // Update the User when the button is clicked
     if(IsPost){
        // get the form entries
        username = Request["username"];
        email = Request["email"];
        picture = WebImage.GetImageFromRequest();

        // validate fields
        if(String.IsNullOrEmpty(username)){
            ModelState.AddError("username","Username is required");
        }
        if(String.IsNullOrEmpty(email)){
             ModelState.AddError("email","Email address is required");
        }
        
        // Commented out because we allow a user to use the default picture.
        //if(String.IsNullOrEmpty(picture)){
        //     ModelState.AddError("picture","A jpg or png picture is required");
        //}
        
        if(ModelState.IsValid){

            // Check if email already exists
            var matchingEmail = db.QuerySingle("SELECT Email FROM UserProfile " +
                                               "WHERE LOWER(Email) = LOWER(@0) " +
                                               "AND UserId != @1", email, editUserID);

            //Check if Username already exists
            var matchingUsername = db.QuerySingle("SELECT Username FROM UserProfile " +
                                                  "WHERE LOWER(Username) = LOWER(@0) " +
                                                  "AND UserId != @1", username, editUserID); 

            //EMAIL AND USERNAME AND IMAGE
            if (matchingEmail == null && matchingUsername == null) {
                //UPLOAD IMAGE:
                if(picture != null){
                    // TODO: Better filename choice??
                    newFileName = Guid.NewGuid().ToString() + "_" + Path.GetFileName(picture.FileName);
                    imagePath = @"Images\" + newFileName;
                    picture.Save(@"~\" + imagePath);
                }
                // TODO: Default image needs to be set if photo==null

                var updateQuery="UPDATE UserProfile " +
                                "SET Username=@0, Email=@1, Picture=@2 " +
                                "WHERE UserId=@3";
                 
                db.Execute(updateQuery, username, email, newFileName, editUserID);
                Response.Redirect(@Href("~/Admin"));
            } else {
                // User already exists in db
                ModelState.AddFormError("Email or username address is already in use.");
                
            }   //end else
        }       //end Validation(IsValid)
    }       // END If(IsPost)
}

<!DOCTYPE html>

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <title>Update Product</title>
    </head>
    <body>
    <h1>Update Product</h1>
    
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

    <form method="post" action="" enctype="multipart/form-data">
        <fieldset>
        <legend>Update User</legend>    <!-- TODO: CSS Style this field-->
                
            <ol>
                <li>
                    <label for="username" @if(!ModelState.IsValidField("username")){<text>class="error-label"</text>}>Username</label>
                    <input type="text" id="username" name="username" value="@username" @Validation.For("username") autofocus="true" />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("username")
                </li>
                <li>
                    <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address</label>
                    <input type="email" id="email" name="email" value="@email" @Validation.For("email") />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("email")
                </li>
                <li class="image-upload">           <!--TODO: CSS Style: class and id-->
                    <label for="Image">Image</label>
                    <input type="file" id="Image" name="Image" /> <br/>
                    @* TODO: Validation like previous entries?  Also value="" field *@
                    @Html.ValidationMessage("Image")
                </li>
            </ol>

            <input type="submit" value="Update User" name="submit">
    
        </fieldset>
        
        </form>
    </body>
</html>
